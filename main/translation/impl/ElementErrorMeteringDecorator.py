#*
# * Publishes metric about errors generated by decorated translator.
# * <p>
# * Each time decorated translator throws an error,
# * this decorator increments a meter.
# * <p>
# * The name of meter to be incremented is determined by
# * {@link ElementErrorMeteringDecorator#getMeterName}.
# * <p>
# * Parameters of metric can be customized via {@link ElementErrorMeteringDecorator#metricMeterFactory}.
# * <p>
# * C - type of translation context.
# 
#JAVA TO PYTHON CONVERTER TODO TASK: Java annotations have no direct Python equivalent:
#ORIGINAL LINE: @CompileStatic public class ElementErrorMeteringDecorator<C> extends GroovyObjectSupport implements AroundElement<C>
class ElementErrorMeteringDecorator(GroovyObjectSupport, AroundElement):
    #    *
    #     * Creates an instance.
    #     *
    #     :param next:            Translator to be decorated.
    #     :param metricRegistry:  Metric registry where metric should be reported to.
    #     :param metricsBaseName: Base name (prefix) for metrics.
    #     
#JAVA TO PYTHON CONVERTER TODO TASK: Java annotations have no direct Python equivalent:
#ORIGINAL LINE: public ElementErrorMeteringDecorator(@Nonnull AroundElement<C> next, @Nonnull MetricRegistry metricRegistry, @Nonnull String metricsBaseName)
    def __init__(self, next, metricRegistry, metricsBaseName):
        #instance fields found by Java to Python Converter:
        self._next = None
        self._metricRegistry = None
        self._metricsBaseName = None
        self._meterName = None
        self._metricMeterFactory = None

        self._next = next
        self._metricRegistry = metricRegistry
        self._metricsBaseName = metricsBaseName

#JAVA TO PYTHON CONVERTER TODO TASK: Java annotations have no direct Python equivalent:
#ORIGINAL LINE: @Override @SuppressWarnings("CatchThrowable") public List<?> translateElement(@Nonnull String stageName, @Nonnull Closure<List<?>> stageCode, @Nullable Object element, @Nullable C context)
    def translateElement(self, stageName, stageCode, element, context):
        try:
#JAVA TO PYTHON CONVERTER TODO TASK: The following line could not be converted:
            return ((List<?>)(next.invokeMethod("translateElement", new Object[]{stageName, stageCode, element, context})));
        except Throwable as e:
            self._metricRegistry.invokeMethod("meter", [self.getMeterName(), self.getMetricMeterFactory()]).invokeMethod("mark", [])
            raise e


    def getNext(self):
        return self._next

    def setNext(self, next):
        self._next = next

    def getMetricRegistry(self):
        return self._metricRegistry

    def setMetricRegistry(self, metricRegistry):
        self._metricRegistry = metricRegistry

    def getMetricsBaseName(self):
        return self._metricsBaseName

    def setMetricsBaseName(self, metricsBaseName):
        self._metricsBaseName = metricsBaseName

    def getMeterName(self):
        return self._meterName

    def setMeterName(self, meterName):
        self._meterName = meterName

    def getMetricMeterFactory(self):
        return self._metricMeterFactory

    def setMetricMeterFactory(self, metricMeterFactory):
        self._metricMeterFactory = metricMeterFactory

    #    *
    #     * Translator to be decorated.
    #     
    #    *
    #     * Metric registry to which metrics should be reported.
    #     
    #    *
    #     * Base name for reported metrics.
    #     
    #    *
    #     * Name of the metric that will report errors.
    #     * <p>
    #     * The closure should take single String parameter that is stage name causing error and should return metric name.
    #     * <p>
    #     * By default, this is {@link #metricsBaseName}STAGENAME.error.
    #     * Where STAGENAME is a name of the stage that has caused an error.
    #     
    #    *
    #     * Factory that is to be used to create meter metrics.
    #     * <p>
    #     * By default, uses default parameters of {@link com.codahale.metrics.Meter#Meter()}.
    #     
